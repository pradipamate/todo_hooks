{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TodoList","useState","newtodo","Setnewtodo","todo","SetTodo","className","onSubmit","e","preventDefault","id","Date","now","text","console","log","target","reset","placeholder","onChange","value","map","item","key","href","onClick","filter","class","aria-hidden","library","add","faTrash","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0OAOe,SAASA,IAAY,IAAD,EAEDC,mBAAS,IAFR,mBAExBC,EAFwB,KAEfC,EAFe,OAGPF,mBAAS,IAHF,mBAGxBG,EAHwB,KAGlBC,EAHkB,KAyB/B,OACI,yBAAKC,UAAU,YACX,oDACA,yBAAKA,UAAU,aACX,0BAAMC,SAjBA,SAACC,GACfA,EAAEC,iBACc,KAAZP,IAEJG,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAAEM,GAAIC,KAAKC,MAAOC,KAAMX,MAC1CY,QAAQC,IAAI,UAAWV,GACvBG,EAAEQ,OAAOC,WAYG,2BAAOC,YAAY,aAAaC,SAzB1B,SAACX,GACnBA,EAAEC,iBACFN,EAAWK,EAAEQ,OAAOI,OACpBN,QAAQC,IAAI,SAAUP,EAAEQ,OAAOI,WAyBvB,4BACKhB,EAAKiB,KAAI,SAAAC,GAAI,OACV,wBAAIC,IAAKD,EAAKZ,IACTY,EAAKT,KACN,4BAAQW,KAAK,IAAIC,QAAS,kBAhB9Bf,EAgB+CY,EAAKZ,GAfpEL,EAAQD,EAAKsB,QAAO,SAACJ,GAAD,OAAUA,EAAKZ,KAAOA,WAC1CI,QAAQC,IAAI,UAAWV,GAFR,IAACK,IAiBQ,8BAAM,uBAAGiB,MAAM,cAAcC,cAAY,kBAxCzEC,IAAQC,IAAIC,KCOQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.f9e4310d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDom from \"react-dom\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nlibrary.add(faTrash);\n\nexport default function TodoList() {\n\n    const [newtodo, Setnewtodo] = useState('')\n    const [todo, SetTodo] = useState([])\n\n    const changehandler = (e) => {\n        e.preventDefault();\n        Setnewtodo(e.target.value);\n        console.log(\"setNew\", e.target.value);\n\n    }\n\n    const submitted = (e) => {\n        e.preventDefault();\n        if (newtodo === '')\n            return\n        SetTodo([...todo, { id: Date.now(), text: newtodo }])\n        console.log(\"SetTodo\", SetTodo);\n        e.target.reset()\n\n    }\n    const removeTodo = (id) => {\n        SetTodo(todo.filter((item) => item.id !== id))\n        console.log(\"asdsdds\", SetTodo);\n    }\n    return (\n        <div className=\"todolist\">\n            <h1>TODOLIST USING HOOKS</h1>\n            <div className=\"main_part\">\n                <form onSubmit={submitted}>\n                    <input placeholder=\"Enter Item\" onChange={changehandler} />\n                </form>\n\n                <ul>\n                    {todo.map(item => (\n                        <li key={item.id}>\n                            {item.text}\n                            <button href=\"#\" onClick={() => removeTodo(item.id)}>\n                                <span><i class=\"fa fa-trash\" aria-hidden=\"true\"></i></span></button>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </div>\n\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}